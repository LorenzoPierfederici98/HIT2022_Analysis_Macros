<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="AnalyzePeakCrystal_8cc" kind="file" language="C++">
    <compoundname>AnalyzePeakCrystal.cc</compoundname>
    <includes refid="AnalyzePeakCrystal_8h" local="yes">AnalyzePeakCrystal.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc</label>
        <link refid="AnalyzePeakCrystal_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>AnalyzePeakCrystal.h</label>
        <link refid="AnalyzePeakCrystal_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>TCanvas.h</label>
      </node>
      <node id="7">
        <label>TF1.h</label>
      </node>
      <node id="3">
        <label>TFile.h</label>
      </node>
      <node id="6">
        <label>TFitResultPtr.h</label>
      </node>
      <node id="5">
        <label>TH1D.h</label>
      </node>
      <node id="8">
        <label>TLegend.h</label>
      </node>
      <node id="9">
        <label>TObjString.h</label>
      </node>
      <node id="13">
        <label>TSpectrum.h</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>iomanip</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="AnalyzePeakCrystal_8cc_1a88bec13ed9c957dba2ee562a6d361e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnalyzePeakCrystal</definition>
        <argsstring>()</argsstring>
        <name>AnalyzePeakCrystal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" line="10" column="6" bodyfile="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" bodystart="10" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="AnalyzePeakCrystal_8cc_1a5aadeca6af3105a72d885dcc752237db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintMeasurement</definition>
        <argsstring>(double value, double uncertainty)</argsstring>
        <name>PrintMeasurement</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>uncertainty</declname>
        </param>
        <briefdescription>
<para>Prints a measurement value and its uncertainty. </para>
        </briefdescription>
        <detaileddescription>
<para>This function prints a measurement value and its uncertainty to the console.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The measurement value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uncertainty</parametername>
</parameternamelist>
<parameterdescription>
<para>The uncertainty of the measurement. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" line="84" column="6" bodyfile="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" bodystart="84" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="AnalyzePeakCrystal_8cc_1a814766d4b881835f9ba65bc6bcb27b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TFitResultPtr</type>
        <definition>TFitResultPtr FitPeakWithTSpectrum</definition>
        <argsstring>(TH1D *hist, double threshold)</argsstring>
        <name>FitPeakWithTSpectrum</name>
        <param>
          <type>TH1D *</type>
          <declname>hist</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Fits a peak in a histogram using TSpectrum. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses TSpectrum to search for a peak in a histogram and fits it with a Gaussian function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hist</parametername>
</parameternamelist>
<parameterdescription>
<para>The histogram to fit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold for peak detection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A TFitResultPtr containing the fit result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" line="93" column="15" bodyfile="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" bodystart="93" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="AnalyzePeakCrystal_8cc_1aee07cb059be4125e9378b6ec353e11a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; TH1D *, TH1D * &gt;</type>
        <definition>std::tuple&lt; TH1D *, TH1D * &gt; FindHistograms</definition>
        <argsstring>(TFile *inFile, const TString &amp;histName_total, const TString &amp;histName)</argsstring>
        <name>FindHistograms</name>
        <param>
          <type>TFile *</type>
          <declname>inFile</declname>
        </param>
        <param>
          <type>const TString &amp;</type>
          <declname>histName_total</declname>
        </param>
        <param>
          <type>const TString &amp;</type>
          <declname>histName</declname>
        </param>
        <briefdescription>
<para>Finds histograms in a ROOT file. </para>
        </briefdescription>
        <detaileddescription>
<para>This function finds and retrieves histograms from a ROOT file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFile</parametername>
</parameternamelist>
<parameterdescription>
<para>The input ROOT file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>histName_total</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the total histogram. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>histName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the specific histogram. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple containing pointers to the total histogram and the specific histogram. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" line="114" column="12" bodyfile="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="AnalyzePeakCrystal_8cc_1aec202f6e32bb23c6bb5ffe63a7d2e7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SaveFitResultsToFile</definition>
        <argsstring>(TCanvas *canvas, TH1D *hist, TFitResultPtr fitResult, const TString &amp;outputFileName)</argsstring>
        <name>SaveFitResultsToFile</name>
        <param>
          <type>TCanvas *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>TH1D *</type>
          <declname>hist</declname>
        </param>
        <param>
          <type>TFitResultPtr</type>
          <declname>fitResult</declname>
        </param>
        <param>
          <type>const TString &amp;</type>
          <declname>outputFileName</declname>
        </param>
        <briefdescription>
<para>Saves fit results to a ROOT file. </para>
        </briefdescription>
        <detaileddescription>
<para>This function saves the fit results and the corresponding histogram to a ROOT file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canvas</parametername>
</parameternamelist>
<parameterdescription>
<para>The canvas containing the fit plot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hist</parametername>
</parameternamelist>
<parameterdescription>
<para>The histogram to save. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fitResult</parametername>
</parameternamelist>
<parameterdescription>
<para>The fit result to save. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the output ROOT file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" line="123" column="6" bodyfile="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc" bodystart="123" bodyend="138"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Macro<sp/>that<sp/>fits<sp/>the<sp/>1D<sp/>charge<sp/>histograms<sp/>for<sp/>a<sp/>given<sp/>crystal<sp/>of<sp/>the<sp/>calorimeter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>histograms<sp/>are<sp/>retireved<sp/>form<sp/>the<sp/>AnaLyzeCalo.cc<sp/>merged<sp/>output<sp/>files<sp/>(the<sp/>histograms<sp/>are<sp/>automatically<sp/>summed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>be<sp/>run<sp/>with<sp/>e.g.<sp/><sp/>root<sp/>-l<sp/>-b<sp/>-q<sp/>&apos;AnalyzePeakCrystal.cc()&apos;,<sp/>-b<sp/>doesn&apos;t<sp/>display<sp/>plots.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>an<sp/>interval<sp/>between<sp/>x_min<sp/>and<sp/>x_max<sp/>a<sp/>peak<sp/>beyond<sp/>fit_thresh<sp/>is<sp/>automatically<sp/>found<sp/>with<sp/>TSpectrum<sp/>and<sp/>fitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>fit<sp/>results<sp/>are<sp/>inserted<sp/>in<sp/>files<sp/>namekd<sp/>like<sp/>e.g.<sp/>Calo/AnaFOOT_Calo_Decoded_HIT2022_140MeV_Fit.root<sp/>which<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>crystalID<sp/>charge<sp/>histogram<sp/>and<sp/>the<sp/>fit<sp/>plot<sp/>restricted<sp/>in<sp/>[x_min,<sp/>x_max].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="AnalyzePeakCrystal_8h" kindref="compound">AnalyzePeakCrystal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnalyzePeakCrystal()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>double&gt;&gt;<sp/>filesAndEnergies<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Calo/AnaFOOT_Calo_Decoded_HIT2022_100MeV.root&quot;</highlight><highlight class="normal">,<sp/>100},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Calo/AnaFOOT_Calo_Decoded_HIT2022_140MeV.root&quot;</highlight><highlight class="normal">,<sp/>140},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Calo/AnaFOOT_Calo_Decoded_HIT2022_180MeV.root&quot;</highlight><highlight class="normal">,<sp/>180},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Calo/AnaFOOT_Calo_Decoded_HIT2022_200MeV.root&quot;</highlight><highlight class="normal">,<sp/>200},</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Calo/AnaFOOT_Calo_Decoded_HIT2022_220MeV.root&quot;</highlight><highlight class="normal">,<sp/>220}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_min<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_max<sp/>=<sp/>0.6;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[fileName,<sp/>energy]<sp/>:<sp/>filesAndEnergies)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TFile<sp/>*inFile<sp/>=<sp/>TFile::Open(fileName.c_str());</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inFile<sp/>||<sp/>inFile-&gt;IsZombie())<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>open<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fileName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crystal_ID<sp/>=<sp/>1;<sp/>crystal_ID<sp/>&lt;<sp/>63;<sp/>crystal_ID++)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TCanvas<sp/>*canvas<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(Form(</highlight><highlight class="stringliteral">&quot;c1_%d&quot;</highlight><highlight class="normal">,<sp/>crystal_ID),<sp/></highlight><highlight class="stringliteral">&quot;Fit<sp/>Results&quot;</highlight><highlight class="normal">,<sp/>800,<sp/>600);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>histName<sp/>=<sp/>Form(</highlight><highlight class="stringliteral">&quot;Charge_Calo_crystalId_%d&quot;</highlight><highlight class="normal">,<sp/>crystal_ID);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>histName_total<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Charge_Calo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[Charge_Calo_crystal,<sp/>Charge_Calo]<sp/>=<sp/>FindHistograms(inFile,<sp/>histName_total,<sp/>histName);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Charge_Calo_crystal<sp/>||<sp/>Charge_Calo_crystal-&gt;GetEntries()<sp/>==<sp/>0<sp/>||<sp/>!Charge_Calo<sp/>||<sp/>Charge_Calo-&gt;GetEntries()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Warning:<sp/>Histogram<sp/>for<sp/>crystal<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>crystal_ID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>empty<sp/>or<sp/>missing.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>canvas;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>0.002;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Charge_Calo_crystal-&gt;GetEntries()<sp/>&gt;<sp/>threshold<sp/>*<sp/>Charge_Calo-&gt;GetEntries())<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canvas-&gt;SetTitle(Form(</highlight><highlight class="stringliteral">&quot;Beam<sp/>Energy:<sp/>%.0f<sp/>MeV<sp/>|<sp/>Crystal<sp/>ID:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>energy,<sp/>crystal_ID));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D<sp/>*Charge_Calo_fullrange<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Charge_Calo_crystal-&gt;Clone());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charge_Calo_crystal-&gt;GetXaxis()-&gt;SetRangeUser(</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(energy<sp/>==<sp/>100)<sp/>?<sp/>0.1<sp/>:<sp/>x_min,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(energy<sp/>==<sp/>100)<sp/>?<sp/>0.35<sp/>:<sp/>x_max</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fit_thresh<sp/>=<sp/>(energy<sp/>==<sp/>100)<sp/>?<sp/>0.1<sp/>:<sp/>0.25;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TFitResultPtr<sp/>fitResult<sp/>=<sp/>FitPeakWithTSpectrum(Charge_Calo_crystal,<sp/>fit_thresh);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fitResult.Get()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>energy:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>energy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MeV<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>crystal:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>crystal_ID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanCharge<sp/>=<sp/>fitResult-&gt;Parameter(1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanChargeErr<sp/>=<sp/>fitResult-&gt;ParError(1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stdCharge<sp/>=<sp/>fitResult-&gt;Parameter(2);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintMeasurement(meanCharge,<sp/>meanChargeErr);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(meanCharge<sp/>/<sp/>stdCharge<sp/>-<sp/>1<sp/>&lt;<sp/>0.1<sp/>||<sp/>stdCharge<sp/>==<sp/>0.<sp/>||<sp/>meanCharge<sp/>/<sp/>meanChargeErr<sp/>-<sp/>1<sp/>&lt;<sp/>0.5)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Skipping<sp/>fit<sp/>because<sp/>the<sp/>mean/std<sp/>or<sp/>mean/meanErr<sp/>charge<sp/>ratios<sp/>are<sp/>close<sp/>to<sp/>1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fit<sp/>failed<sp/>for<sp/>crystal<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>crystal_ID<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>outputFileName<sp/>=<sp/>fileName;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFileName.ReplaceAll(</highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;_Fit.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SaveFitResultsToFile(canvas,<sp/>Charge_Calo_fullrange,<sp/>fitResult,<sp/>outputFileName);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Charge_Calo_fullrange;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>canvas;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inFile-&gt;Close();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>inFile;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintMeasurement(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uncertainty)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigFigs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::ceil(-std::log10(uncertainty)))<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roundFactor<sp/>=<sp/>std::pow(10,<sp/>sigFigs);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>std::setprecision(sigFigs)<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Peak<sp/>position:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::round(value<sp/>*<sp/>roundFactor)<sp/>/<sp/>roundFactor<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>±<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::round(uncertainty<sp/>*<sp/>roundFactor)<sp/>/<sp/>roundFactor<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">TFitResultPtr<sp/>FitPeakWithTSpectrum(TH1D<sp/>*hist,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>TSpectrum<sp/>spectrum(1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPeaks<sp/>=<sp/>spectrum.Search(hist,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>threshold);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPeaks<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>peak<sp/>found<sp/>beyond<sp/>threshold<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>threshold<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TFitResultPtr(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>peakPos<sp/>=<sp/>spectrum.GetPositionX()[0];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Peak<sp/>found<sp/>at<sp/>x<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>peakPos<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binMax<sp/>=<sp/>hist-&gt;FindBin(peakPos);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binLow<sp/>=<sp/>std::max(1,<sp/>binMax<sp/>-<sp/>10);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binHigh<sp/>=<sp/>std::min(hist-&gt;GetNbinsX(),<sp/>binMax<sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fitting<sp/>range:<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>hist-&gt;GetBinLowEdge(binLow)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>hist-&gt;GetBinLowEdge(binHigh<sp/>+<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hist-&gt;Fit(</highlight><highlight class="stringliteral">&quot;gaus&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>hist-&gt;GetBinLowEdge(binLow),<sp/>hist-&gt;GetBinLowEdge(binHigh<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">std::tuple&lt;TH1D<sp/>*,<sp/>TH1D<sp/>*&gt;<sp/>FindHistograms(TFile<sp/>*inFile,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;histName_total,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;histName)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inFile<sp/>||<sp/>inFile-&gt;IsZombie())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D<sp/>*hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1D<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inFile-&gt;Get(histName));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D<sp/>*hist_total<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1D<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inFile-&gt;Get(histName_total));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{hist,<sp/>hist_total};</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SaveFitResultsToFile(TCanvas<sp/>*canvas,<sp/>TH1D<sp/>*hist,<sp/>TFitResultPtr<sp/>fitResult,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;outputFileName)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>*outFile<sp/>=<sp/>TFile::Open(outputFileName,<sp/></highlight><highlight class="stringliteral">&quot;UPDATE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!outFile<sp/>||<sp/>outFile-&gt;IsZombie())<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Cannot<sp/>create<sp/>output<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>outputFileName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;cd();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>gPad-&gt;SetLogy();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;Update();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>hist-&gt;Write(hist-&gt;GetName(),<sp/>TObject::kOverwrite);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;Write(Form(</highlight><highlight class="stringliteral">&quot;Canvas_Crystal_%s&quot;</highlight><highlight class="normal">,<sp/>hist-&gt;GetName()),<sp/><sp/>TObject::kOverwrite);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>fitResult-&gt;Write(Form(</highlight><highlight class="stringliteral">&quot;Fit_result_%s&quot;</highlight><highlight class="normal">,<sp/>hist-&gt;GetName()),<sp/><sp/>TObject::kOverwrite);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>outFile-&gt;Close();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Saved<sp/>fit<sp/>results<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>outputFileName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/Lorenzo/Desktop/HIT2022_Analysis_Macros/src/AnalyzePeakCrystal.cc"/>
  </compounddef>
</doxygen>
